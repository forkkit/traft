// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.10.0
// source: traft.proto

package traft

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Cmd is a log record
type Cmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op  string `protobuf:"bytes,10,opt,name=Op,proto3" json:"Op,omitempty"`
	Key string `protobuf:"bytes,20,opt,name=Key,proto3" json:"Key,omitempty"`
	// Types that are assignable to Value:
	//	*Cmd_VStr
	//	*Cmd_VI64
	//	*Cmd_VClusterConfig
	Value isCmd_Value `protobuf_oneof:"Value"`
}

func (x *Cmd) Reset() {
	*x = Cmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cmd) ProtoMessage() {}

func (x *Cmd) ProtoReflect() protoreflect.Message {
	mi := &file_traft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cmd.ProtoReflect.Descriptor instead.
func (*Cmd) Descriptor() ([]byte, []int) {
	return file_traft_proto_rawDescGZIP(), []int{0}
}

func (x *Cmd) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *Cmd) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (m *Cmd) GetValue() isCmd_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Cmd) GetVStr() string {
	if x, ok := x.GetValue().(*Cmd_VStr); ok {
		return x.VStr
	}
	return ""
}

func (x *Cmd) GetVI64() int64 {
	if x, ok := x.GetValue().(*Cmd_VI64); ok {
		return x.VI64
	}
	return 0
}

func (x *Cmd) GetVClusterConfig() *ClusterConfig {
	if x, ok := x.GetValue().(*Cmd_VClusterConfig); ok {
		return x.VClusterConfig
	}
	return nil
}

type isCmd_Value interface {
	isCmd_Value()
}

type Cmd_VStr struct {
	VStr string `protobuf:"bytes,31,opt,name=VStr,proto3,oneof"`
}

type Cmd_VI64 struct {
	VI64 int64 `protobuf:"varint,32,opt,name=VI64,proto3,oneof"`
}

type Cmd_VClusterConfig struct {
	// cluster config change: adding/removing members.
	VClusterConfig *ClusterConfig `protobuf:"bytes,33,opt,name=VClusterConfig,proto3,oneof"`
}

func (*Cmd_VStr) isCmd_Value() {}

func (*Cmd_VI64) isCmd_Value() {}

func (*Cmd_VClusterConfig) isCmd_Value() {}

// TailBitmap is a bitmap that has all its leading bits set to `1`.
// Thus it is compressed with an Offset of all-ones position and a trailing
// bitmap.
// It is used to describe Record dependency etc.
type TailBitmap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64    `protobuf:"varint,1,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Words  []uint64 `protobuf:"varint,2,rep,packed,name=Words,proto3" json:"Words,omitempty"`
}

func (x *TailBitmap) Reset() {
	*x = TailBitmap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TailBitmap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TailBitmap) ProtoMessage() {}

func (x *TailBitmap) ProtoReflect() protoreflect.Message {
	mi := &file_traft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TailBitmap.ProtoReflect.Descriptor instead.
func (*TailBitmap) Descriptor() ([]byte, []int) {
	return file_traft_proto_rawDescGZIP(), []int{1}
}

func (x *TailBitmap) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TailBitmap) GetWords() []uint64 {
	if x != nil {
		return x.Words
	}
	return nil
}

// Record is a log record
type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Log sequence number.
	Seq int64 `protobuf:"varint,10,opt,name=Seq,proto3" json:"Seq,omitempty"`
	// Cmd describes what this log does.
	Cmd *Cmd `protobuf:"bytes,30,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
	// Overrides describes what previous logs this log record overrides.
	Overrides *TailBitmap `protobuf:"bytes,40,opt,name=Overrides,proto3" json:"Overrides,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_traft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_traft_proto_rawDescGZIP(), []int{2}
}

func (x *Record) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Record) GetCmd() *Cmd {
	if x != nil {
		return x.Cmd
	}
	return nil
}

func (x *Record) GetOverrides() *TailBitmap {
	if x != nil {
		return x.Overrides
	}
	return nil
}

type ReplicateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplicateReply) Reset() {
	*x = ReplicateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateReply) ProtoMessage() {}

func (x *ReplicateReply) ProtoReflect() protoreflect.Message {
	mi := &file_traft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateReply.ProtoReflect.Descriptor instead.
func (*ReplicateReply) Descriptor() ([]byte, []int) {
	return file_traft_proto_rawDescGZIP(), []int{3}
}

type Ballot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptedTerm int64 `protobuf:"varint,1,opt,name=AcceptedTerm,proto3" json:"AcceptedTerm,omitempty"`
	Term         int64 `protobuf:"varint,2,opt,name=Term,proto3" json:"Term,omitempty"`
	// Seq is the max log seq
	Seq int64 `protobuf:"varint,3,opt,name=Seq,proto3" json:"Seq,omitempty"`
	Id  int64 `protobuf:"varint,4,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *Ballot) Reset() {
	*x = Ballot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ballot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ballot) ProtoMessage() {}

func (x *Ballot) ProtoReflect() protoreflect.Message {
	mi := &file_traft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ballot.ProtoReflect.Descriptor instead.
func (*Ballot) Descriptor() ([]byte, []int) {
	return file_traft_proto_rawDescGZIP(), []int{4}
}

func (x *Ballot) GetAcceptedTerm() int64 {
	if x != nil {
		return x.AcceptedTerm
	}
	return 0
}

func (x *Ballot) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Ballot) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Ballot) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config       *ClusterConfig     `protobuf:"bytes,1,opt,name=Config,proto3" json:"Config,omitempty"`
	Log          []*Record          `protobuf:"bytes,2,rep,name=Log,proto3" json:"Log,omitempty"`
	Term         int64              `protobuf:"varint,3,opt,name=Term,proto3" json:"Term,omitempty"`
	AcceptedTerm int64              `protobuf:"varint,4,opt,name=AcceptedTerm,proto3" json:"AcceptedTerm,omitempty"`
	Progresses   []*ReplicaProgress `protobuf:"bytes,5,rep,name=Progresses,proto3" json:"Progresses,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_traft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_traft_proto_rawDescGZIP(), []int{5}
}

func (x *Node) GetConfig() *ClusterConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Node) GetLog() []*Record {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *Node) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Node) GetAcceptedTerm() int64 {
	if x != nil {
		return x.AcceptedTerm
	}
	return 0
}

func (x *Node) GetProgresses() []*ReplicaProgress {
	if x != nil {
		return x.Progresses
	}
	return nil
}

type ReplicaProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Has       *TailBitmap `protobuf:"bytes,1,opt,name=Has,proto3" json:"Has,omitempty"`
	Committed *TailBitmap `protobuf:"bytes,2,opt,name=Committed,proto3" json:"Committed,omitempty"`
	Applied   *TailBitmap `protobuf:"bytes,3,opt,name=Applied,proto3" json:"Applied,omitempty"`
}

func (x *ReplicaProgress) Reset() {
	*x = ReplicaProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaProgress) ProtoMessage() {}

func (x *ReplicaProgress) ProtoReflect() protoreflect.Message {
	mi := &file_traft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaProgress.ProtoReflect.Descriptor instead.
func (*ReplicaProgress) Descriptor() ([]byte, []int) {
	return file_traft_proto_rawDescGZIP(), []int{6}
}

func (x *ReplicaProgress) GetHas() *TailBitmap {
	if x != nil {
		return x.Has
	}
	return nil
}

func (x *ReplicaProgress) GetCommitted() *TailBitmap {
	if x != nil {
		return x.Committed
	}
	return nil
}

func (x *ReplicaProgress) GetApplied() *TailBitmap {
	if x != nil {
		return x.Applied
	}
	return nil
}

type ReplicaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`
}

func (x *ReplicaInfo) Reset() {
	*x = ReplicaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaInfo) ProtoMessage() {}

func (x *ReplicaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_traft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaInfo.ProtoReflect.Descriptor instead.
func (*ReplicaInfo) Descriptor() ([]byte, []int) {
	return file_traft_proto_rawDescGZIP(), []int{7}
}

func (x *ReplicaInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReplicaInfo) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type ClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*ReplicaInfo `protobuf:"bytes,11,rep,name=Members,proto3" json:"Members,omitempty"`
	Quorums []uint64       `protobuf:"varint,21,rep,packed,name=Quorums,proto3" json:"Quorums,omitempty"`
}

func (x *ClusterConfig) Reset() {
	*x = ClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig) ProtoMessage() {}

func (x *ClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_traft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig.ProtoReflect.Descriptor instead.
func (*ClusterConfig) Descriptor() ([]byte, []int) {
	return file_traft_proto_rawDescGZIP(), []int{8}
}

func (x *ClusterConfig) GetMembers() []*ReplicaInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ClusterConfig) GetQuorums() []uint64 {
	if x != nil {
		return x.Quorums
	}
	return nil
}

type VoteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bal *Ballot     `protobuf:"bytes,1,opt,name=Bal,proto3" json:"Bal,omitempty"`
	Has *TailBitmap `protobuf:"bytes,2,opt,name=Has,proto3" json:"Has,omitempty"`
}

func (x *VoteReq) Reset() {
	*x = VoteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traft_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteReq) ProtoMessage() {}

func (x *VoteReq) ProtoReflect() protoreflect.Message {
	mi := &file_traft_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteReq.ProtoReflect.Descriptor instead.
func (*VoteReq) Descriptor() ([]byte, []int) {
	return file_traft_proto_rawDescGZIP(), []int{9}
}

func (x *VoteReq) GetBal() *Ballot {
	if x != nil {
		return x.Bal
	}
	return nil
}

func (x *VoteReq) GetHas() *TailBitmap {
	if x != nil {
		return x.Has
	}
	return nil
}

type VoteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bal  *Ballot   `protobuf:"bytes,1,opt,name=Bal,proto3" json:"Bal,omitempty"`
	Logs []*Record `protobuf:"bytes,30,rep,name=Logs,proto3" json:"Logs,omitempty"`
}

func (x *VoteReply) Reset() {
	*x = VoteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traft_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteReply) ProtoMessage() {}

func (x *VoteReply) ProtoReflect() protoreflect.Message {
	mi := &file_traft_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteReply.ProtoReflect.Descriptor instead.
func (*VoteReply) Descriptor() ([]byte, []int) {
	return file_traft_proto_rawDescGZIP(), []int{10}
}

func (x *VoteReply) GetBal() *Ballot {
	if x != nil {
		return x.Bal
	}
	return nil
}

func (x *VoteReply) GetLogs() []*Record {
	if x != nil {
		return x.Logs
	}
	return nil
}

var File_traft_proto protoreflect.FileDescriptor

var file_traft_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x01,
	0x0a, 0x03, 0x43, 0x6d, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x4f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x56, 0x53, 0x74, 0x72, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x56, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a,
	0x04, 0x56, 0x49, 0x36, 0x34, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x56,
	0x49, 0x36, 0x34, 0x12, 0x38, 0x0a, 0x0e, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x56,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x07, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x0a, 0x54, 0x61, 0x69, 0x6c, 0x42, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x57, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x57, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0x5d, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x53, 0x65, 0x71, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x53, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x03, 0x43, 0x6d, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x43, 0x6d,
	0x64, 0x52, 0x03, 0x43, 0x6d, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x61, 0x69, 0x6c,
	0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x09, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x22, 0x10, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x62, 0x0a, 0x06, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x54, 0x65, 0x72,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x53, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x03,
	0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x30, 0x0a, 0x0a, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x82, 0x01,
	0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x03, 0x48, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x54, 0x61, 0x69, 0x6c, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x03, 0x48, 0x61, 0x73,
	0x12, 0x29, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x61, 0x69, 0x6c, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70,
	0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54,
	0x61, 0x69, 0x6c, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x07, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x22, 0x31, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x41, 0x64, 0x64, 0x72, 0x22, 0x51, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x07, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x22, 0x43, 0x0a, 0x07, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x03, 0x42, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x03, 0x42, 0x61, 0x6c, 0x12, 0x1d,
	0x0a, 0x03, 0x48, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x61,
	0x69, 0x6c, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x03, 0x48, 0x61, 0x73, 0x22, 0x43, 0x0a,
	0x09, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x03, 0x42, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74,
	0x52, 0x03, 0x42, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x4c, 0x6f,
	0x67, 0x73, 0x32, 0x50, 0x0a, 0x05, 0x54, 0x52, 0x61, 0x66, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x56,
	0x6f, 0x74, 0x65, 0x12, 0x08, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x09, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x07, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x1a, 0x0f, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x74, 0x72, 0x61, 0x66, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_traft_proto_rawDescOnce sync.Once
	file_traft_proto_rawDescData = file_traft_proto_rawDesc
)

func file_traft_proto_rawDescGZIP() []byte {
	file_traft_proto_rawDescOnce.Do(func() {
		file_traft_proto_rawDescData = protoimpl.X.CompressGZIP(file_traft_proto_rawDescData)
	})
	return file_traft_proto_rawDescData
}

var file_traft_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_traft_proto_goTypes = []interface{}{
	(*Cmd)(nil),             // 0: Cmd
	(*TailBitmap)(nil),      // 1: TailBitmap
	(*Record)(nil),          // 2: Record
	(*ReplicateReply)(nil),  // 3: ReplicateReply
	(*Ballot)(nil),          // 4: Ballot
	(*Node)(nil),            // 5: Node
	(*ReplicaProgress)(nil), // 6: ReplicaProgress
	(*ReplicaInfo)(nil),     // 7: ReplicaInfo
	(*ClusterConfig)(nil),   // 8: ClusterConfig
	(*VoteReq)(nil),         // 9: VoteReq
	(*VoteReply)(nil),       // 10: VoteReply
}
var file_traft_proto_depIdxs = []int32{
	8,  // 0: Cmd.VClusterConfig:type_name -> ClusterConfig
	0,  // 1: Record.Cmd:type_name -> Cmd
	1,  // 2: Record.Overrides:type_name -> TailBitmap
	8,  // 3: Node.Config:type_name -> ClusterConfig
	2,  // 4: Node.Log:type_name -> Record
	6,  // 5: Node.Progresses:type_name -> ReplicaProgress
	1,  // 6: ReplicaProgress.Has:type_name -> TailBitmap
	1,  // 7: ReplicaProgress.Committed:type_name -> TailBitmap
	1,  // 8: ReplicaProgress.Applied:type_name -> TailBitmap
	7,  // 9: ClusterConfig.Members:type_name -> ReplicaInfo
	4,  // 10: VoteReq.Bal:type_name -> Ballot
	1,  // 11: VoteReq.Has:type_name -> TailBitmap
	4,  // 12: VoteReply.Bal:type_name -> Ballot
	2,  // 13: VoteReply.Logs:type_name -> Record
	9,  // 14: TRaft.Vote:input_type -> VoteReq
	2,  // 15: TRaft.Replicate:input_type -> Record
	10, // 16: TRaft.Vote:output_type -> VoteReply
	3,  // 17: TRaft.Replicate:output_type -> ReplicateReply
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_traft_proto_init() }
func file_traft_proto_init() {
	if File_traft_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_traft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TailBitmap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ballot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traft_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traft_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_traft_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Cmd_VStr)(nil),
		(*Cmd_VI64)(nil),
		(*Cmd_VClusterConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_traft_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_traft_proto_goTypes,
		DependencyIndexes: file_traft_proto_depIdxs,
		MessageInfos:      file_traft_proto_msgTypes,
	}.Build()
	File_traft_proto = out.File
	file_traft_proto_rawDesc = nil
	file_traft_proto_goTypes = nil
	file_traft_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TRaftClient is the client API for TRaft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TRaftClient interface {
	Vote(ctx context.Context, in *VoteReq, opts ...grpc.CallOption) (*VoteReply, error)
	Replicate(ctx context.Context, in *Record, opts ...grpc.CallOption) (*ReplicateReply, error)
}

type tRaftClient struct {
	cc grpc.ClientConnInterface
}

func NewTRaftClient(cc grpc.ClientConnInterface) TRaftClient {
	return &tRaftClient{cc}
}

func (c *tRaftClient) Vote(ctx context.Context, in *VoteReq, opts ...grpc.CallOption) (*VoteReply, error) {
	out := new(VoteReply)
	err := c.cc.Invoke(ctx, "/TRaft/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRaftClient) Replicate(ctx context.Context, in *Record, opts ...grpc.CallOption) (*ReplicateReply, error) {
	out := new(ReplicateReply)
	err := c.cc.Invoke(ctx, "/TRaft/Replicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TRaftServer is the server API for TRaft service.
type TRaftServer interface {
	Vote(context.Context, *VoteReq) (*VoteReply, error)
	Replicate(context.Context, *Record) (*ReplicateReply, error)
}

// UnimplementedTRaftServer can be embedded to have forward compatible implementations.
type UnimplementedTRaftServer struct {
}

func (*UnimplementedTRaftServer) Vote(context.Context, *VoteReq) (*VoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedTRaftServer) Replicate(context.Context, *Record) (*ReplicateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replicate not implemented")
}

func RegisterTRaftServer(s *grpc.Server, srv TRaftServer) {
	s.RegisterService(&_TRaft_serviceDesc, srv)
}

func _TRaft_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRaftServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TRaft/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRaftServer).Vote(ctx, req.(*VoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRaft_Replicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRaftServer).Replicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TRaft/Replicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRaftServer).Replicate(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

var _TRaft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TRaft",
	HandlerType: (*TRaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _TRaft_Vote_Handler,
		},
		{
			MethodName: "Replicate",
			Handler:    _TRaft_Replicate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "traft.proto",
}
